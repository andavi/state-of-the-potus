<!-- <div class="barChartsContainer"> -->
  <div class="pieContainer">
    <canvas id="sentimentPie"></canvas>
  </div>
  <div class="pieContainer">
    <canvas id="sentimentMultiPie"></canvas>
  </div>
  <div class="barChartContainer">
    <canvas id="sentimentBar"></canvas>
  </div>
  <div class="lineContainer">
    <canvas id="sentimentLine"></canvas>
  </div>
<!-- </div> -->


<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.3/Chart.bundle.min.js"></script>
<script>
  window.onload = function () {
    // This creates normal js object to work wth
    const tweets = <%- JSON.stringify(tweets) %>;
    const sentimentColor = <%- JSON.stringify(sentimentColor) %>;

    // Pie Chart
    const positive = tweets.map(t => t.sentiment).reduce((a, p) => a + (p > 0.5 ? 1 : 0), 0);
    const negative = tweets.length - positive;

    var pieCtx = document.getElementById("sentimentPie");
    var myChart = new Chart(pieCtx, {
      type: 'pie',
      data: {
        labels: ["Positive Tweets", "Negative Tweets"],
        datasets: [{
          label: 'Positive vs. Negative',
          data: [positive, negative],
          borderColor: [
            'blue',
            'red',
          ],
          backgroundColor: [
            'rgba(0, 0, 255, 0.5)',
            'rgba(255, 0, 0, 0.5)'
          ],
          borderWidth: 2
        }]
      },
      options: {
        title: {
          display: true,
          text: 'Positive Tweets vs. Negative Tweets',
          fontSize: 16,
        },
        scales: {
          yAxes: [{
            ticks: {
              beginAtZero: true
            }
          }]
        }
      }
    });



    // Multi Pie Chart
    const veryPositive = tweets.map(t => t.sentiment).reduce((a, p) => a + (p > 0.8 ? 1 : 0), 0);
    const lessPositive = tweets.map(t => t.sentiment).reduce((a, p) => a + ((p > 0.6 && p <= 0.8) ? 1 : 0), 0);
    const neutral = tweets.map(t => t.sentiment).reduce((a, p) => a + ((p > 0.4 && p <= 0.6) ? 1 : 0), 0);
    const lessNegative = tweets.map(t => t.sentiment).reduce((a, p) => a + ((p > 0.2 && p <= 0.4) ? 1 : 0), 0);
    const veryNegative = tweets.map(t => t.sentiment).reduce((a, p) => a + ( p <= 0.2 ? 1 : 0), 0);

    var pieCtx = document.getElementById("sentimentMultiPie");
    var myChart = new Chart(pieCtx, {
      type: 'pie',
      data: {
        labels: ["Very Positive", "Less Positive", "Roughly Neutral", "Less Negative", "Very Negative"],
        datasets: [{
          label: 'Sentiment Further Divided',
          data: [veryPositive, lessPositive, neutral, lessNegative, veryNegative],
          borderColor: [
          'rgba(0, 0, 255, 1)',
          'rgba(63, 0, 191, 1)',
          'rgba(127, 0, 127, 1)',
          'rgba(191, 0, 63, 1)',
          'rgba(255, 0, 0, 1)',
          ],
          backgroundColor: [
          'rgba(0, 0, 255, .5)',
          'rgba(63, 0, 191, .5)',
          'rgba(127, 0, 127, .5)',
          'rgba(191, 0, 63, .5)',
          'rgba(255, 0, 0, .5)',
          ],
          borderWidth: 2
        }]
      },
      options: {
        title: {
          display: true,
          text: 'Sentiment Further Divided',
          fontSize: 16,
        },
        scales: {
          yAxes: [{
            ticks: {
              beginAtZero: true
            }
          }]
        }
      }
    });



    // Bar Chart categorizing sentiment
    // function counting number of tweets within n-width bands
    function getDivisions(n, sentiments) {
      // const sentiments = tweets.sentiments;
      const sentBandsTotals = [];
      const sentBandsLabels = [];
      let start = 0.0;
      let end = n;
      while (end <= 1) {
        const sentsPerBand = sentiments.reduce((a, s) => {
          a += s >= start && s < end ? 1 : 0;
          return a;
        }, 0);
        sentBandsTotals.push(sentsPerBand);
        sentBandsLabels.push(`[${start.toFixed ? start.toFixed(1) : start}, ${end.toFixed(1)})`);
        start += n;
        end += n;
      }
      return {sentBandsTotals, sentBandsLabels};
    }

    console.log(getDivisions(.01, tweets.map(t => t.sentiment)));

    const sentBandLabels = getDivisions(.1, tweets.map(t => t.sentiment)).sentBandLabels;
    const sentBandTotals = getDivisions(.1, tweets.map(t => t.sentiment)).sentBandTotals;

    var barCtx = document.getElementById("sentimentBar");
    var barChart = new Chart(barCtx, {
    type: 'bar',
    data: {
        labels: ["[0.0, 0.1)", "[0.1, 0.2)", "[0.2, 0.3)", "[0.3, 0.4)", "[0.4, 0.5)", "[0.5, 0.6)", "[0.6, 0.7)", "[0.7, 0.8)", "[0.8, 0.9)", "[0.9, 1.0)"],
        datasets: [{
            label: '# of Tweets',
            data: [286, 174, 144, 199, 125, 133, 124, 165, 281, 748],
            backgroundColor: [
              'rgba(255,0,0,.5)',
              'rgba(227,0,28,.5)',
              'rgba(198,0,57,.5)',
              'rgba(170,0,85,.5)',
              'rgba(142,0,113,.5)',
              'rgba(113,0,142,.5)',
              'rgba(85,0,170,.5)',
              'rgba(57,0,198,.5)',
              'rgba(28,0,227,.5)',
              'rgba(0,0,255,.5)'
            ],
            borderColor: [
              'rgba(255,0,0,1)',
              'rgba(227,0,28,1)',
              'rgba(198,0,57,1)',
              'rgba(170,0,85,1)',
              'rgba(142,0,113,1)',
              'rgba(113,0,142,1)',
              'rgba(85,0,170,1)',
              'rgba(57,0,198,1)',
              'rgba(28,0,227,1)',
              'rgba(0,0,255,1)'
          ],
            borderWidth: 1
        }]
    },
    options: {
        scales: {
            yAxes: [{
                ticks: {
                    beginAtZero:true
                }
            }]
        }
    }
});


    // Line Chart
    // decimate data
    function decimateData(n) {
      let sentiments = tweets.map(t => t.sentiment);
      let dates = tweets.map(t => t.created_at);
      const decimatedSentiments = [];
      const decimatedDates = [];
      while(sentiments.length) {
        const deciSent = sentiments.slice(0, n).reduce((a, s) => a + s) / sentiments.slice(0, n).length;
        decimatedSentiments.push(deciSent)
        sentiments = sentiments.slice(n);

        decimatedDates.push(dates[0]);
        dates = dates.slice(n);
      }
      return {decimatedSentiments, decimatedDates};
    }

    const decimateFactor = 100;


    var lineCtx = document.getElementById("sentimentLine").getContext("2d");
    // var gradientStroke = lineCtx.createLinearGradient(0, 500, 0, 0);
    // gradientStroke.addColorStop(0, "red");
    // gradientStroke.addColorStop(1, "blue");
    var chart = new Chart(lineCtx, {
      // The type of chart we want to create
      type: 'line',
      // The data for our dataset
      data: {
        // labels: tweets.map(t => new Date(t.created_at)),
        labels: decimateData(decimateFactor).decimatedDates,
        datasets: [{
          label: "Sentiment",
          backgroundColor: sentimentColor[1],
          borderColor: sentimentColor[0],
          fill: false,

          // data: tweets.map(t => t.sentiment),
          data: decimateData(decimateFactor).decimatedSentiments,
          showLine: true,
          pointRadius: 4,
          borderWidth: 2
        }],
      },
      // Configuration options go here
      options: {
        legend: {
          display: true,
          labels: {
            // boxWidth: 15
          }
        },
        title: {
          display: true,
          text: `Tweet Sentiment (Decimated n=${decimateFactor}) Over Time`,
          fontSize: 16,
        },
        scales: {
          xAxes: [{
            type: 'time',
          }]
        }
      }
    });

  };

</script>